//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.7.6
//
// <auto-generated>
//
// Generated from file `IMU.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#include <IMU.h>
#include <IceUtil/PushDisableWarnings.h>
#include <Ice/LocalException.h>
#include <Ice/ValueFactory.h>
#include <Ice/OutgoingAsync.h>
#include <Ice/InputStream.h>
#include <Ice/OutputStream.h>
#include <IceUtil/PopDisableWarnings.h>

#if defined(_MSC_VER)
#   pragma warning(disable:4458) // declaration of ... hides class member
#elif defined(__clang__)
#   pragma clang diagnostic ignored "-Wshadow"
#elif defined(__GNUC__)
#   pragma GCC diagnostic ignored "-Wshadow"
#endif

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 307
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 >= 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 6
#       error Ice patch level mismatch!
#   endif
#endif

#ifdef ICE_CPP11_MAPPING // C++11 mapping

namespace
{

const ::std::string iceC_RoboCompIMU_IMU_ids[2] =
{
    "::Ice::Object",
    "::RoboCompIMU::IMU"
};
const ::std::string iceC_RoboCompIMU_IMU_ops[] =
{
    "getAcceleration",
    "getAngularVel",
    "getDataImu",
    "getMagneticFields",
    "getOrientation",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping",
    "resetImu"
};
const ::std::string iceC_RoboCompIMU_IMU_getAcceleration_name = "getAcceleration";
const ::std::string iceC_RoboCompIMU_IMU_getAngularVel_name = "getAngularVel";
const ::std::string iceC_RoboCompIMU_IMU_getDataImu_name = "getDataImu";
const ::std::string iceC_RoboCompIMU_IMU_getMagneticFields_name = "getMagneticFields";
const ::std::string iceC_RoboCompIMU_IMU_getOrientation_name = "getOrientation";
const ::std::string iceC_RoboCompIMU_IMU_resetImu_name = "resetImu";

}

bool
RoboCompIMU::IMU::ice_isA(::std::string s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_RoboCompIMU_IMU_ids, iceC_RoboCompIMU_IMU_ids + 2, s);
}

::std::vector<::std::string>
RoboCompIMU::IMU::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector<::std::string>(&iceC_RoboCompIMU_IMU_ids[0], &iceC_RoboCompIMU_IMU_ids[2]);
}

::std::string
RoboCompIMU::IMU::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
RoboCompIMU::IMU::ice_staticId()
{
    static const ::std::string typeId = "::RoboCompIMU::IMU";
    return typeId;
}

/// \cond INTERNAL
bool
RoboCompIMU::IMU::_iceD_getAcceleration(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    Acceleration ret = this->getAcceleration(current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
RoboCompIMU::IMU::_iceD_getAngularVel(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    Gyroscope ret = this->getAngularVel(current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
RoboCompIMU::IMU::_iceD_getDataImu(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    DataImu ret = this->getDataImu(current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
RoboCompIMU::IMU::_iceD_getMagneticFields(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    Magnetic ret = this->getMagneticFields(current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
RoboCompIMU::IMU::_iceD_getOrientation(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    Orientation ret = this->getOrientation(current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
RoboCompIMU::IMU::_iceD_resetImu(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    this->resetImu(current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
RoboCompIMU::IMU::_iceDispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair<const ::std::string*, const ::std::string*> r = ::std::equal_range(iceC_RoboCompIMU_IMU_ops, iceC_RoboCompIMU_IMU_ops + 10, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - iceC_RoboCompIMU_IMU_ops)
    {
        case 0:
        {
            return _iceD_getAcceleration(in, current);
        }
        case 1:
        {
            return _iceD_getAngularVel(in, current);
        }
        case 2:
        {
            return _iceD_getDataImu(in, current);
        }
        case 3:
        {
            return _iceD_getMagneticFields(in, current);
        }
        case 4:
        {
            return _iceD_getOrientation(in, current);
        }
        case 5:
        {
            return _iceD_ice_id(in, current);
        }
        case 6:
        {
            return _iceD_ice_ids(in, current);
        }
        case 7:
        {
            return _iceD_ice_isA(in, current);
        }
        case 8:
        {
            return _iceD_ice_ping(in, current);
        }
        case 9:
        {
            return _iceD_resetImu(in, current);
        }
        default:
        {
            assert(false);
            throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
        }
    }
}
/// \endcond

/// \cond INTERNAL
void
RoboCompIMU::IMUPrx::_iceI_getAcceleration(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::RoboCompIMU::Acceleration>>& outAsync, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_RoboCompIMU_IMU_getAcceleration_name);
    outAsync->invoke(iceC_RoboCompIMU_IMU_getAcceleration_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr);
}
/// \endcond

/// \cond INTERNAL
void
RoboCompIMU::IMUPrx::_iceI_getAngularVel(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::RoboCompIMU::Gyroscope>>& outAsync, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_RoboCompIMU_IMU_getAngularVel_name);
    outAsync->invoke(iceC_RoboCompIMU_IMU_getAngularVel_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr);
}
/// \endcond

/// \cond INTERNAL
void
RoboCompIMU::IMUPrx::_iceI_getDataImu(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::RoboCompIMU::DataImu>>& outAsync, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_RoboCompIMU_IMU_getDataImu_name);
    outAsync->invoke(iceC_RoboCompIMU_IMU_getDataImu_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr);
}
/// \endcond

/// \cond INTERNAL
void
RoboCompIMU::IMUPrx::_iceI_getMagneticFields(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::RoboCompIMU::Magnetic>>& outAsync, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_RoboCompIMU_IMU_getMagneticFields_name);
    outAsync->invoke(iceC_RoboCompIMU_IMU_getMagneticFields_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr);
}
/// \endcond

/// \cond INTERNAL
void
RoboCompIMU::IMUPrx::_iceI_getOrientation(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::RoboCompIMU::Orientation>>& outAsync, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_RoboCompIMU_IMU_getOrientation_name);
    outAsync->invoke(iceC_RoboCompIMU_IMU_getOrientation_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr);
}
/// \endcond

/// \cond INTERNAL
void
RoboCompIMU::IMUPrx::_iceI_resetImu(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::Ice::Context& context)
{
    outAsync->invoke(iceC_RoboCompIMU_IMU_resetImu_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr);
}
/// \endcond

/// \cond INTERNAL
::std::shared_ptr<::Ice::ObjectPrx>
RoboCompIMU::IMUPrx::_newInstance() const
{
    return ::IceInternal::createProxy<IMUPrx>();
}
/// \endcond

const ::std::string&
RoboCompIMU::IMUPrx::ice_staticId()
{
    return IMU::ice_staticId();
}

namespace Ice
{
}

#else // C++98 mapping

namespace
{

const ::std::string iceC_RoboCompIMU_IMU_getAcceleration_name = "getAcceleration";

const ::std::string iceC_RoboCompIMU_IMU_getAngularVel_name = "getAngularVel";

const ::std::string iceC_RoboCompIMU_IMU_getDataImu_name = "getDataImu";

const ::std::string iceC_RoboCompIMU_IMU_getMagneticFields_name = "getMagneticFields";

const ::std::string iceC_RoboCompIMU_IMU_getOrientation_name = "getOrientation";

const ::std::string iceC_RoboCompIMU_IMU_resetImu_name = "resetImu";

}

/// \cond INTERNAL
::IceProxy::Ice::Object* ::IceProxy::RoboCompIMU::upCast(IMU* p) { return p; }

void
::IceProxy::RoboCompIMU::_readProxy(::Ice::InputStream* istr, ::IceInternal::ProxyHandle< IMU>& v)
{
    ::Ice::ObjectPrx proxy;
    istr->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new IMU;
        v->_copyFrom(proxy);
    }
}
/// \endcond

::Ice::AsyncResultPtr
IceProxy::RoboCompIMU::IMU::_iceI_begin_getAcceleration(const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_RoboCompIMU_IMU_getAcceleration_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_RoboCompIMU_IMU_getAcceleration_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_RoboCompIMU_IMU_getAcceleration_name, ::Ice::Normal, context);
        result->writeEmptyParams();
        result->invoke(iceC_RoboCompIMU_IMU_getAcceleration_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

::RoboCompIMU::Acceleration
IceProxy::RoboCompIMU::IMU::end_getAcceleration(const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_RoboCompIMU_IMU_getAcceleration_name);
    ::RoboCompIMU::Acceleration ret;
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(ret);
    result->_endReadParams();
    return ret;
}

::Ice::AsyncResultPtr
IceProxy::RoboCompIMU::IMU::_iceI_begin_getAngularVel(const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_RoboCompIMU_IMU_getAngularVel_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_RoboCompIMU_IMU_getAngularVel_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_RoboCompIMU_IMU_getAngularVel_name, ::Ice::Normal, context);
        result->writeEmptyParams();
        result->invoke(iceC_RoboCompIMU_IMU_getAngularVel_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

::RoboCompIMU::Gyroscope
IceProxy::RoboCompIMU::IMU::end_getAngularVel(const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_RoboCompIMU_IMU_getAngularVel_name);
    ::RoboCompIMU::Gyroscope ret;
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(ret);
    result->_endReadParams();
    return ret;
}

::Ice::AsyncResultPtr
IceProxy::RoboCompIMU::IMU::_iceI_begin_getDataImu(const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_RoboCompIMU_IMU_getDataImu_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_RoboCompIMU_IMU_getDataImu_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_RoboCompIMU_IMU_getDataImu_name, ::Ice::Normal, context);
        result->writeEmptyParams();
        result->invoke(iceC_RoboCompIMU_IMU_getDataImu_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

::RoboCompIMU::DataImu
IceProxy::RoboCompIMU::IMU::end_getDataImu(const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_RoboCompIMU_IMU_getDataImu_name);
    ::RoboCompIMU::DataImu ret;
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(ret);
    result->_endReadParams();
    return ret;
}

::Ice::AsyncResultPtr
IceProxy::RoboCompIMU::IMU::_iceI_begin_getMagneticFields(const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_RoboCompIMU_IMU_getMagneticFields_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_RoboCompIMU_IMU_getMagneticFields_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_RoboCompIMU_IMU_getMagneticFields_name, ::Ice::Normal, context);
        result->writeEmptyParams();
        result->invoke(iceC_RoboCompIMU_IMU_getMagneticFields_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

::RoboCompIMU::Magnetic
IceProxy::RoboCompIMU::IMU::end_getMagneticFields(const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_RoboCompIMU_IMU_getMagneticFields_name);
    ::RoboCompIMU::Magnetic ret;
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(ret);
    result->_endReadParams();
    return ret;
}

::Ice::AsyncResultPtr
IceProxy::RoboCompIMU::IMU::_iceI_begin_getOrientation(const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_RoboCompIMU_IMU_getOrientation_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_RoboCompIMU_IMU_getOrientation_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_RoboCompIMU_IMU_getOrientation_name, ::Ice::Normal, context);
        result->writeEmptyParams();
        result->invoke(iceC_RoboCompIMU_IMU_getOrientation_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

::RoboCompIMU::Orientation
IceProxy::RoboCompIMU::IMU::end_getOrientation(const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_RoboCompIMU_IMU_getOrientation_name);
    ::RoboCompIMU::Orientation ret;
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(ret);
    result->_endReadParams();
    return ret;
}

::Ice::AsyncResultPtr
IceProxy::RoboCompIMU::IMU::_iceI_begin_resetImu(const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_RoboCompIMU_IMU_resetImu_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_RoboCompIMU_IMU_resetImu_name, ::Ice::Normal, context);
        result->writeEmptyParams();
        result->invoke(iceC_RoboCompIMU_IMU_resetImu_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

void
IceProxy::RoboCompIMU::IMU::end_resetImu(const ::Ice::AsyncResultPtr& result)
{
    _end(result, iceC_RoboCompIMU_IMU_resetImu_name);
}

/// \cond INTERNAL
::IceProxy::Ice::Object*
IceProxy::RoboCompIMU::IMU::_newInstance() const
{
    return new IMU;
}
/// \endcond

const ::std::string&
IceProxy::RoboCompIMU::IMU::ice_staticId()
{
    return ::RoboCompIMU::IMU::ice_staticId();
}

RoboCompIMU::IMU::~IMU()
{
}

/// \cond INTERNAL
::Ice::Object* RoboCompIMU::upCast(IMU* p) { return p; }

/// \endcond

namespace
{
const ::std::string iceC_RoboCompIMU_IMU_ids[2] =
{
    "::Ice::Object",
    "::RoboCompIMU::IMU"
};

}

bool
RoboCompIMU::IMU::ice_isA(const ::std::string& s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_RoboCompIMU_IMU_ids, iceC_RoboCompIMU_IMU_ids + 2, s);
}

::std::vector< ::std::string>
RoboCompIMU::IMU::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&iceC_RoboCompIMU_IMU_ids[0], &iceC_RoboCompIMU_IMU_ids[2]);
}

const ::std::string&
RoboCompIMU::IMU::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
RoboCompIMU::IMU::ice_staticId()
{
#ifdef ICE_HAS_THREAD_SAFE_LOCAL_STATIC
    static const ::std::string typeId = "::RoboCompIMU::IMU";
    return typeId;
#else
    return iceC_RoboCompIMU_IMU_ids[1];
#endif
}

/// \cond INTERNAL
bool
RoboCompIMU::IMU::_iceD_getAcceleration(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    inS.readEmptyParams();
    Acceleration ret = this->getAcceleration(current);
    ::Ice::OutputStream* ostr = inS.startWriteParams();
    ostr->write(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
RoboCompIMU::IMU::_iceD_getAngularVel(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    inS.readEmptyParams();
    Gyroscope ret = this->getAngularVel(current);
    ::Ice::OutputStream* ostr = inS.startWriteParams();
    ostr->write(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
RoboCompIMU::IMU::_iceD_getDataImu(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    inS.readEmptyParams();
    DataImu ret = this->getDataImu(current);
    ::Ice::OutputStream* ostr = inS.startWriteParams();
    ostr->write(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
RoboCompIMU::IMU::_iceD_getMagneticFields(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    inS.readEmptyParams();
    Magnetic ret = this->getMagneticFields(current);
    ::Ice::OutputStream* ostr = inS.startWriteParams();
    ostr->write(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
RoboCompIMU::IMU::_iceD_getOrientation(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    inS.readEmptyParams();
    Orientation ret = this->getOrientation(current);
    ::Ice::OutputStream* ostr = inS.startWriteParams();
    ostr->write(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
RoboCompIMU::IMU::_iceD_resetImu(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    inS.readEmptyParams();
    this->resetImu(current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

namespace
{
const ::std::string iceC_RoboCompIMU_IMU_all[] =
{
    "getAcceleration",
    "getAngularVel",
    "getDataImu",
    "getMagneticFields",
    "getOrientation",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping",
    "resetImu"
};

}

/// \cond INTERNAL
bool
RoboCompIMU::IMU::_iceDispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair<const ::std::string*, const ::std::string*> r = ::std::equal_range(iceC_RoboCompIMU_IMU_all, iceC_RoboCompIMU_IMU_all + 10, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - iceC_RoboCompIMU_IMU_all)
    {
        case 0:
        {
            return _iceD_getAcceleration(in, current);
        }
        case 1:
        {
            return _iceD_getAngularVel(in, current);
        }
        case 2:
        {
            return _iceD_getDataImu(in, current);
        }
        case 3:
        {
            return _iceD_getMagneticFields(in, current);
        }
        case 4:
        {
            return _iceD_getOrientation(in, current);
        }
        case 5:
        {
            return _iceD_ice_id(in, current);
        }
        case 6:
        {
            return _iceD_ice_ids(in, current);
        }
        case 7:
        {
            return _iceD_ice_isA(in, current);
        }
        case 8:
        {
            return _iceD_ice_ping(in, current);
        }
        case 9:
        {
            return _iceD_resetImu(in, current);
        }
        default:
        {
            assert(false);
            throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
        }
    }
}
/// \endcond

/// \cond STREAM
void
RoboCompIMU::IMU::_iceWriteImpl(::Ice::OutputStream* ostr) const
{
    ostr->startSlice(ice_staticId(), -1, true);
    ::Ice::StreamWriter< IMU, ::Ice::OutputStream>::write(ostr, *this);
    ostr->endSlice();
}

void
RoboCompIMU::IMU::_iceReadImpl(::Ice::InputStream* istr)
{
    istr->startSlice();
    ::Ice::StreamReader< IMU, ::Ice::InputStream>::read(istr, *this);
    istr->endSlice();
}
/// \endcond

/// \cond INTERNAL
void
RoboCompIMU::_icePatchObjectPtr(IMUPtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = IMUPtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(IMU::ice_staticId(), v);
    }
}
/// \endcond

namespace Ice
{
}

#endif
