//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.7.6
//
// <auto-generated>
//
// Generated from file `IMU.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#ifndef __IMU_h__
#define __IMU_h__

#include <IceUtil/PushDisableWarnings.h>
#include <Ice/ProxyF.h>
#include <Ice/ObjectF.h>
#include <Ice/ValueF.h>
#include <Ice/Exception.h>
#include <Ice/LocalObject.h>
#include <Ice/StreamHelpers.h>
#include <Ice/Comparable.h>
#include <Ice/Proxy.h>
#include <Ice/Object.h>
#include <Ice/GCObject.h>
#include <Ice/Value.h>
#include <Ice/Incoming.h>
#include <Ice/FactoryTableInit.h>
#include <IceUtil/ScopedArray.h>
#include <Ice/Optional.h>
#include <IceUtil/UndefSysMacros.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 307
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 >= 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 6
#       error Ice patch level mismatch!
#   endif
#endif

#ifdef ICE_CPP11_MAPPING // C++11 mapping

namespace RoboCompIMU
{

class IMU;
class IMUPrx;

}

namespace RoboCompIMU
{

struct Acceleration
{
    float XAcc;
    float YAcc;
    float ZAcc;

    /**
     * Obtains a tuple containing all of the struct's data members.
     * @return The data members in a tuple.
     */
    std::tuple<const float&, const float&, const float&> ice_tuple() const
    {
        return std::tie(XAcc, YAcc, ZAcc);
    }
};

struct Gyroscope
{
    float XGyr;
    float YGyr;
    float ZGyr;

    /**
     * Obtains a tuple containing all of the struct's data members.
     * @return The data members in a tuple.
     */
    std::tuple<const float&, const float&, const float&> ice_tuple() const
    {
        return std::tie(XGyr, YGyr, ZGyr);
    }
};

struct Magnetic
{
    float XMag;
    float YMag;
    float ZMag;

    /**
     * Obtains a tuple containing all of the struct's data members.
     * @return The data members in a tuple.
     */
    std::tuple<const float&, const float&, const float&> ice_tuple() const
    {
        return std::tie(XMag, YMag, ZMag);
    }
};

struct Orientation
{
    float Roll;
    float Pitch;
    float Yaw;

    /**
     * Obtains a tuple containing all of the struct's data members.
     * @return The data members in a tuple.
     */
    std::tuple<const float&, const float&, const float&> ice_tuple() const
    {
        return std::tie(Roll, Pitch, Yaw);
    }
};

struct DataImu
{
    ::RoboCompIMU::Acceleration acc;
    ::RoboCompIMU::Gyroscope gyro;
    ::RoboCompIMU::Magnetic mag;
    ::RoboCompIMU::Orientation rot;
    float temperature;

    /**
     * Obtains a tuple containing all of the struct's data members.
     * @return The data members in a tuple.
     */
    std::tuple<const ::RoboCompIMU::Acceleration&, const ::RoboCompIMU::Gyroscope&, const ::RoboCompIMU::Magnetic&, const ::RoboCompIMU::Orientation&, const float&> ice_tuple() const
    {
        return std::tie(acc, gyro, mag, rot, temperature);
    }
};

using Ice::operator<;
using Ice::operator<=;
using Ice::operator>;
using Ice::operator>=;
using Ice::operator==;
using Ice::operator!=;

}

namespace RoboCompIMU
{

class IMU : public virtual ::Ice::Object
{
public:

    using ProxyType = IMUPrx;

    /**
     * Determines whether this object supports an interface with the given Slice type ID.
     * @param id The fully-scoped Slice type ID.
     * @param current The Current object for the invocation.
     * @return True if this object supports the interface, false, otherwise.
     */
    virtual bool ice_isA(::std::string id, const ::Ice::Current& current) const override;

    /**
     * Obtains a list of the Slice type IDs representing the interfaces supported by this object.
     * @param current The Current object for the invocation.
     * @return A list of fully-scoped type IDs.
     */
    virtual ::std::vector<::std::string> ice_ids(const ::Ice::Current& current) const override;

    /**
     * Obtains a Slice type ID representing the most-derived interface supported by this object.
     * @param current The Current object for the invocation.
     * @return A fully-scoped type ID.
     */
    virtual ::std::string ice_id(const ::Ice::Current& current) const override;

    /**
     * Obtains the Slice type ID corresponding to this class.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    virtual Acceleration getAcceleration(const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_getAcceleration(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual Gyroscope getAngularVel(const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_getAngularVel(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual DataImu getDataImu(const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_getDataImu(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual Magnetic getMagneticFields(const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_getMagneticFields(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual Orientation getOrientation(const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_getOrientation(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual void resetImu(const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_resetImu(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    /// \cond INTERNAL
    virtual bool _iceDispatch(::IceInternal::Incoming&, const ::Ice::Current&) override;
    /// \endcond
};

}

namespace RoboCompIMU
{

class IMUPrx : public virtual ::Ice::Proxy<IMUPrx, ::Ice::ObjectPrx>
{
public:

    Acceleration getAcceleration(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makePromiseOutgoing<::RoboCompIMU::Acceleration>(true, this, &IMUPrx::_iceI_getAcceleration, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto getAccelerationAsync(const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<::RoboCompIMU::Acceleration>>().get_future())
    {
        return _makePromiseOutgoing<::RoboCompIMU::Acceleration, P>(false, this, &IMUPrx::_iceI_getAcceleration, context);
    }

    ::std::function<void()>
    getAccelerationAsync(::std::function<void(::RoboCompIMU::Acceleration)> response,
                         ::std::function<void(::std::exception_ptr)> ex = nullptr,
                         ::std::function<void(bool)> sent = nullptr,
                         const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makeLamdaOutgoing<::RoboCompIMU::Acceleration>(std::move(response), std::move(ex), std::move(sent), this, &RoboCompIMU::IMUPrx::_iceI_getAcceleration, context);
    }

    /// \cond INTERNAL
    void _iceI_getAcceleration(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::RoboCompIMU::Acceleration>>&, const ::Ice::Context&);
    /// \endcond

    Gyroscope getAngularVel(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makePromiseOutgoing<::RoboCompIMU::Gyroscope>(true, this, &IMUPrx::_iceI_getAngularVel, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto getAngularVelAsync(const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<::RoboCompIMU::Gyroscope>>().get_future())
    {
        return _makePromiseOutgoing<::RoboCompIMU::Gyroscope, P>(false, this, &IMUPrx::_iceI_getAngularVel, context);
    }

    ::std::function<void()>
    getAngularVelAsync(::std::function<void(::RoboCompIMU::Gyroscope)> response,
                       ::std::function<void(::std::exception_ptr)> ex = nullptr,
                       ::std::function<void(bool)> sent = nullptr,
                       const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makeLamdaOutgoing<::RoboCompIMU::Gyroscope>(std::move(response), std::move(ex), std::move(sent), this, &RoboCompIMU::IMUPrx::_iceI_getAngularVel, context);
    }

    /// \cond INTERNAL
    void _iceI_getAngularVel(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::RoboCompIMU::Gyroscope>>&, const ::Ice::Context&);
    /// \endcond

    DataImu getDataImu(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makePromiseOutgoing<::RoboCompIMU::DataImu>(true, this, &IMUPrx::_iceI_getDataImu, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto getDataImuAsync(const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<::RoboCompIMU::DataImu>>().get_future())
    {
        return _makePromiseOutgoing<::RoboCompIMU::DataImu, P>(false, this, &IMUPrx::_iceI_getDataImu, context);
    }

    ::std::function<void()>
    getDataImuAsync(::std::function<void(::RoboCompIMU::DataImu)> response,
                    ::std::function<void(::std::exception_ptr)> ex = nullptr,
                    ::std::function<void(bool)> sent = nullptr,
                    const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makeLamdaOutgoing<::RoboCompIMU::DataImu>(std::move(response), std::move(ex), std::move(sent), this, &RoboCompIMU::IMUPrx::_iceI_getDataImu, context);
    }

    /// \cond INTERNAL
    void _iceI_getDataImu(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::RoboCompIMU::DataImu>>&, const ::Ice::Context&);
    /// \endcond

    Magnetic getMagneticFields(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makePromiseOutgoing<::RoboCompIMU::Magnetic>(true, this, &IMUPrx::_iceI_getMagneticFields, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto getMagneticFieldsAsync(const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<::RoboCompIMU::Magnetic>>().get_future())
    {
        return _makePromiseOutgoing<::RoboCompIMU::Magnetic, P>(false, this, &IMUPrx::_iceI_getMagneticFields, context);
    }

    ::std::function<void()>
    getMagneticFieldsAsync(::std::function<void(::RoboCompIMU::Magnetic)> response,
                           ::std::function<void(::std::exception_ptr)> ex = nullptr,
                           ::std::function<void(bool)> sent = nullptr,
                           const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makeLamdaOutgoing<::RoboCompIMU::Magnetic>(std::move(response), std::move(ex), std::move(sent), this, &RoboCompIMU::IMUPrx::_iceI_getMagneticFields, context);
    }

    /// \cond INTERNAL
    void _iceI_getMagneticFields(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::RoboCompIMU::Magnetic>>&, const ::Ice::Context&);
    /// \endcond

    Orientation getOrientation(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makePromiseOutgoing<::RoboCompIMU::Orientation>(true, this, &IMUPrx::_iceI_getOrientation, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto getOrientationAsync(const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<::RoboCompIMU::Orientation>>().get_future())
    {
        return _makePromiseOutgoing<::RoboCompIMU::Orientation, P>(false, this, &IMUPrx::_iceI_getOrientation, context);
    }

    ::std::function<void()>
    getOrientationAsync(::std::function<void(::RoboCompIMU::Orientation)> response,
                        ::std::function<void(::std::exception_ptr)> ex = nullptr,
                        ::std::function<void(bool)> sent = nullptr,
                        const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makeLamdaOutgoing<::RoboCompIMU::Orientation>(std::move(response), std::move(ex), std::move(sent), this, &RoboCompIMU::IMUPrx::_iceI_getOrientation, context);
    }

    /// \cond INTERNAL
    void _iceI_getOrientation(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::RoboCompIMU::Orientation>>&, const ::Ice::Context&);
    /// \endcond

    void resetImu(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        _makePromiseOutgoing<void>(true, this, &IMUPrx::_iceI_resetImu, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto resetImuAsync(const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<void>>().get_future())
    {
        return _makePromiseOutgoing<void, P>(false, this, &IMUPrx::_iceI_resetImu, context);
    }

    ::std::function<void()>
    resetImuAsync(::std::function<void()> response,
                  ::std::function<void(::std::exception_ptr)> ex = nullptr,
                  ::std::function<void(bool)> sent = nullptr,
                  const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makeLamdaOutgoing<void>(std::move(response), std::move(ex), std::move(sent), this, &RoboCompIMU::IMUPrx::_iceI_resetImu, context);
    }

    /// \cond INTERNAL
    void _iceI_resetImu(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>&, const ::Ice::Context&);
    /// \endcond

    /**
     * Obtains the Slice type ID of this interface.
     * @return The fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

protected:

    /// \cond INTERNAL
    IMUPrx() = default;
    friend ::std::shared_ptr<IMUPrx> IceInternal::createProxy<IMUPrx>();

    virtual ::std::shared_ptr<::Ice::ObjectPrx> _newInstance() const override;
    /// \endcond
};

}

/// \cond STREAM
namespace Ice
{

template<>
struct StreamableTraits<::RoboCompIMU::Acceleration>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 12;
    static const bool fixedLength = true;
};

template<typename S>
struct StreamReader<::RoboCompIMU::Acceleration, S>
{
    static void read(S* istr, ::RoboCompIMU::Acceleration& v)
    {
        istr->readAll(v.XAcc, v.YAcc, v.ZAcc);
    }
};

template<>
struct StreamableTraits<::RoboCompIMU::Gyroscope>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 12;
    static const bool fixedLength = true;
};

template<typename S>
struct StreamReader<::RoboCompIMU::Gyroscope, S>
{
    static void read(S* istr, ::RoboCompIMU::Gyroscope& v)
    {
        istr->readAll(v.XGyr, v.YGyr, v.ZGyr);
    }
};

template<>
struct StreamableTraits<::RoboCompIMU::Magnetic>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 12;
    static const bool fixedLength = true;
};

template<typename S>
struct StreamReader<::RoboCompIMU::Magnetic, S>
{
    static void read(S* istr, ::RoboCompIMU::Magnetic& v)
    {
        istr->readAll(v.XMag, v.YMag, v.ZMag);
    }
};

template<>
struct StreamableTraits<::RoboCompIMU::Orientation>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 12;
    static const bool fixedLength = true;
};

template<typename S>
struct StreamReader<::RoboCompIMU::Orientation, S>
{
    static void read(S* istr, ::RoboCompIMU::Orientation& v)
    {
        istr->readAll(v.Roll, v.Pitch, v.Yaw);
    }
};

template<>
struct StreamableTraits<::RoboCompIMU::DataImu>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 52;
    static const bool fixedLength = true;
};

template<typename S>
struct StreamReader<::RoboCompIMU::DataImu, S>
{
    static void read(S* istr, ::RoboCompIMU::DataImu& v)
    {
        istr->readAll(v.acc, v.gyro, v.mag, v.rot, v.temperature);
    }
};

}
/// \endcond

/// \cond INTERNAL
namespace RoboCompIMU
{

using IMUPtr = ::std::shared_ptr<IMU>;
using IMUPrxPtr = ::std::shared_ptr<IMUPrx>;

}
/// \endcond

#else // C++98 mapping

namespace IceProxy
{

namespace RoboCompIMU
{

class IMU;
/// \cond INTERNAL
void _readProxy(::Ice::InputStream*, ::IceInternal::ProxyHandle< IMU>&);
::IceProxy::Ice::Object* upCast(IMU*);
/// \endcond

}

}

namespace RoboCompIMU
{

class IMU;
/// \cond INTERNAL
::Ice::Object* upCast(IMU*);
/// \endcond
typedef ::IceInternal::Handle< IMU> IMUPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::RoboCompIMU::IMU> IMUPrx;
typedef IMUPrx IMUPrxPtr;
/// \cond INTERNAL
void _icePatchObjectPtr(IMUPtr&, const ::Ice::ObjectPtr&);
/// \endcond

}

namespace RoboCompIMU
{

struct Acceleration
{
    ::Ice::Float XAcc;
    ::Ice::Float YAcc;
    ::Ice::Float ZAcc;
};

struct Gyroscope
{
    ::Ice::Float XGyr;
    ::Ice::Float YGyr;
    ::Ice::Float ZGyr;
};

struct Magnetic
{
    ::Ice::Float XMag;
    ::Ice::Float YMag;
    ::Ice::Float ZMag;
};

struct Orientation
{
    ::Ice::Float Roll;
    ::Ice::Float Pitch;
    ::Ice::Float Yaw;
};

struct DataImu
{
    ::RoboCompIMU::Acceleration acc;
    ::RoboCompIMU::Gyroscope gyro;
    ::RoboCompIMU::Magnetic mag;
    ::RoboCompIMU::Orientation rot;
    ::Ice::Float temperature;
};

}

namespace RoboCompIMU
{

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::RoboCompIMU::IMU::begin_getAcceleration.
 * Create a wrapper instance by calling ::RoboCompIMU::newCallback_IMU_getAcceleration.
 */
class Callback_IMU_getAcceleration_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_IMU_getAcceleration_Base> Callback_IMU_getAccelerationPtr;

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::RoboCompIMU::IMU::begin_getAngularVel.
 * Create a wrapper instance by calling ::RoboCompIMU::newCallback_IMU_getAngularVel.
 */
class Callback_IMU_getAngularVel_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_IMU_getAngularVel_Base> Callback_IMU_getAngularVelPtr;

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::RoboCompIMU::IMU::begin_getDataImu.
 * Create a wrapper instance by calling ::RoboCompIMU::newCallback_IMU_getDataImu.
 */
class Callback_IMU_getDataImu_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_IMU_getDataImu_Base> Callback_IMU_getDataImuPtr;

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::RoboCompIMU::IMU::begin_getMagneticFields.
 * Create a wrapper instance by calling ::RoboCompIMU::newCallback_IMU_getMagneticFields.
 */
class Callback_IMU_getMagneticFields_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_IMU_getMagneticFields_Base> Callback_IMU_getMagneticFieldsPtr;

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::RoboCompIMU::IMU::begin_getOrientation.
 * Create a wrapper instance by calling ::RoboCompIMU::newCallback_IMU_getOrientation.
 */
class Callback_IMU_getOrientation_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_IMU_getOrientation_Base> Callback_IMU_getOrientationPtr;

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::RoboCompIMU::IMU::begin_resetImu.
 * Create a wrapper instance by calling ::RoboCompIMU::newCallback_IMU_resetImu.
 */
class Callback_IMU_resetImu_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_IMU_resetImu_Base> Callback_IMU_resetImuPtr;

}

namespace IceProxy
{

namespace RoboCompIMU
{

class IMU : public virtual ::Ice::Proxy<IMU, ::IceProxy::Ice::Object>
{
public:

    ::RoboCompIMU::Acceleration getAcceleration(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return end_getAcceleration(_iceI_begin_getAcceleration(context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_getAcceleration(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_getAcceleration(context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getAcceleration(const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getAcceleration(::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_getAcceleration(const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getAcceleration(context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_getAcceleration(const ::RoboCompIMU::Callback_IMU_getAccelerationPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getAcceleration(::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_getAcceleration(const ::Ice::Context& context, const ::RoboCompIMU::Callback_IMU_getAccelerationPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getAcceleration(context, cb, cookie);
    }

    ::RoboCompIMU::Acceleration end_getAcceleration(const ::Ice::AsyncResultPtr& result);

private:

    ::Ice::AsyncResultPtr _iceI_begin_getAcceleration(const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    ::RoboCompIMU::Gyroscope getAngularVel(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return end_getAngularVel(_iceI_begin_getAngularVel(context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_getAngularVel(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_getAngularVel(context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getAngularVel(const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getAngularVel(::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_getAngularVel(const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getAngularVel(context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_getAngularVel(const ::RoboCompIMU::Callback_IMU_getAngularVelPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getAngularVel(::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_getAngularVel(const ::Ice::Context& context, const ::RoboCompIMU::Callback_IMU_getAngularVelPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getAngularVel(context, cb, cookie);
    }

    ::RoboCompIMU::Gyroscope end_getAngularVel(const ::Ice::AsyncResultPtr& result);

private:

    ::Ice::AsyncResultPtr _iceI_begin_getAngularVel(const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    ::RoboCompIMU::DataImu getDataImu(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return end_getDataImu(_iceI_begin_getDataImu(context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_getDataImu(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_getDataImu(context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getDataImu(const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getDataImu(::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_getDataImu(const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getDataImu(context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_getDataImu(const ::RoboCompIMU::Callback_IMU_getDataImuPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getDataImu(::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_getDataImu(const ::Ice::Context& context, const ::RoboCompIMU::Callback_IMU_getDataImuPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getDataImu(context, cb, cookie);
    }

    ::RoboCompIMU::DataImu end_getDataImu(const ::Ice::AsyncResultPtr& result);

private:

    ::Ice::AsyncResultPtr _iceI_begin_getDataImu(const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    ::RoboCompIMU::Magnetic getMagneticFields(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return end_getMagneticFields(_iceI_begin_getMagneticFields(context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_getMagneticFields(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_getMagneticFields(context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getMagneticFields(const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getMagneticFields(::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_getMagneticFields(const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getMagneticFields(context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_getMagneticFields(const ::RoboCompIMU::Callback_IMU_getMagneticFieldsPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getMagneticFields(::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_getMagneticFields(const ::Ice::Context& context, const ::RoboCompIMU::Callback_IMU_getMagneticFieldsPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getMagneticFields(context, cb, cookie);
    }

    ::RoboCompIMU::Magnetic end_getMagneticFields(const ::Ice::AsyncResultPtr& result);

private:

    ::Ice::AsyncResultPtr _iceI_begin_getMagneticFields(const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    ::RoboCompIMU::Orientation getOrientation(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return end_getOrientation(_iceI_begin_getOrientation(context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_getOrientation(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_getOrientation(context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getOrientation(const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getOrientation(::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_getOrientation(const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getOrientation(context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_getOrientation(const ::RoboCompIMU::Callback_IMU_getOrientationPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getOrientation(::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_getOrientation(const ::Ice::Context& context, const ::RoboCompIMU::Callback_IMU_getOrientationPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getOrientation(context, cb, cookie);
    }

    ::RoboCompIMU::Orientation end_getOrientation(const ::Ice::AsyncResultPtr& result);

private:

    ::Ice::AsyncResultPtr _iceI_begin_getOrientation(const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    void resetImu(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        end_resetImu(_iceI_begin_resetImu(context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_resetImu(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_resetImu(context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_resetImu(const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_resetImu(::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_resetImu(const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_resetImu(context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_resetImu(const ::RoboCompIMU::Callback_IMU_resetImuPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_resetImu(::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_resetImu(const ::Ice::Context& context, const ::RoboCompIMU::Callback_IMU_resetImuPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_resetImu(context, cb, cookie);
    }

    void end_resetImu(const ::Ice::AsyncResultPtr& result);

private:

    ::Ice::AsyncResultPtr _iceI_begin_resetImu(const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    /**
     * Obtains the Slice type ID corresponding to this interface.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

protected:
    /// \cond INTERNAL

    virtual ::IceProxy::Ice::Object* _newInstance() const;
    /// \endcond
};

}

}

namespace RoboCompIMU
{

class IMU : public virtual ::Ice::Object
{
public:

    typedef IMUPrx ProxyType;
    typedef IMUPtr PointerType;

    virtual ~IMU();

#ifdef ICE_CPP11_COMPILER
    IMU() = default;
    IMU(const IMU&) = default;
    IMU& operator=(const IMU&) = default;
#endif

    /**
     * Determines whether this object supports an interface with the given Slice type ID.
     * @param id The fully-scoped Slice type ID.
     * @param current The Current object for the invocation.
     * @return True if this object supports the interface, false, otherwise.
     */
    virtual bool ice_isA(const ::std::string& id, const ::Ice::Current& current = ::Ice::emptyCurrent) const;

    /**
     * Obtains a list of the Slice type IDs representing the interfaces supported by this object.
     * @param current The Current object for the invocation.
     * @return A list of fully-scoped type IDs.
     */
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& current = ::Ice::emptyCurrent) const;

    /**
     * Obtains a Slice type ID representing the most-derived interface supported by this object.
     * @param current The Current object for the invocation.
     * @return A fully-scoped type ID.
     */
    virtual const ::std::string& ice_id(const ::Ice::Current& current = ::Ice::emptyCurrent) const;

    /**
     * Obtains the Slice type ID corresponding to this class.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    virtual Acceleration getAcceleration(const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_getAcceleration(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual Gyroscope getAngularVel(const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_getAngularVel(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual DataImu getDataImu(const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_getDataImu(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual Magnetic getMagneticFields(const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_getMagneticFields(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual Orientation getOrientation(const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_getOrientation(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual void resetImu(const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_resetImu(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    /// \cond INTERNAL
    virtual bool _iceDispatch(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

protected:

    /// \cond STREAM
    virtual void _iceWriteImpl(::Ice::OutputStream*) const;
    virtual void _iceReadImpl(::Ice::InputStream*);
    /// \endcond
};

/// \cond INTERNAL
inline bool operator==(const IMU& lhs, const IMU& rhs)
{
    return static_cast<const ::Ice::Object&>(lhs) == static_cast<const ::Ice::Object&>(rhs);
}

inline bool operator<(const IMU& lhs, const IMU& rhs)
{
    return static_cast<const ::Ice::Object&>(lhs) < static_cast<const ::Ice::Object&>(rhs);
}
/// \endcond

}

/// \cond STREAM
namespace Ice
{

template<>
struct StreamableTraits< ::RoboCompIMU::Acceleration>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 12;
    static const bool fixedLength = true;
};

template<typename S>
struct StreamWriter< ::RoboCompIMU::Acceleration, S>
{
    static void write(S* ostr, const ::RoboCompIMU::Acceleration& v)
    {
        ostr->write(v.XAcc);
        ostr->write(v.YAcc);
        ostr->write(v.ZAcc);
    }
};

template<typename S>
struct StreamReader< ::RoboCompIMU::Acceleration, S>
{
    static void read(S* istr, ::RoboCompIMU::Acceleration& v)
    {
        istr->read(v.XAcc);
        istr->read(v.YAcc);
        istr->read(v.ZAcc);
    }
};

template<>
struct StreamableTraits< ::RoboCompIMU::Gyroscope>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 12;
    static const bool fixedLength = true;
};

template<typename S>
struct StreamWriter< ::RoboCompIMU::Gyroscope, S>
{
    static void write(S* ostr, const ::RoboCompIMU::Gyroscope& v)
    {
        ostr->write(v.XGyr);
        ostr->write(v.YGyr);
        ostr->write(v.ZGyr);
    }
};

template<typename S>
struct StreamReader< ::RoboCompIMU::Gyroscope, S>
{
    static void read(S* istr, ::RoboCompIMU::Gyroscope& v)
    {
        istr->read(v.XGyr);
        istr->read(v.YGyr);
        istr->read(v.ZGyr);
    }
};

template<>
struct StreamableTraits< ::RoboCompIMU::Magnetic>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 12;
    static const bool fixedLength = true;
};

template<typename S>
struct StreamWriter< ::RoboCompIMU::Magnetic, S>
{
    static void write(S* ostr, const ::RoboCompIMU::Magnetic& v)
    {
        ostr->write(v.XMag);
        ostr->write(v.YMag);
        ostr->write(v.ZMag);
    }
};

template<typename S>
struct StreamReader< ::RoboCompIMU::Magnetic, S>
{
    static void read(S* istr, ::RoboCompIMU::Magnetic& v)
    {
        istr->read(v.XMag);
        istr->read(v.YMag);
        istr->read(v.ZMag);
    }
};

template<>
struct StreamableTraits< ::RoboCompIMU::Orientation>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 12;
    static const bool fixedLength = true;
};

template<typename S>
struct StreamWriter< ::RoboCompIMU::Orientation, S>
{
    static void write(S* ostr, const ::RoboCompIMU::Orientation& v)
    {
        ostr->write(v.Roll);
        ostr->write(v.Pitch);
        ostr->write(v.Yaw);
    }
};

template<typename S>
struct StreamReader< ::RoboCompIMU::Orientation, S>
{
    static void read(S* istr, ::RoboCompIMU::Orientation& v)
    {
        istr->read(v.Roll);
        istr->read(v.Pitch);
        istr->read(v.Yaw);
    }
};

template<>
struct StreamableTraits< ::RoboCompIMU::DataImu>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 52;
    static const bool fixedLength = true;
};

template<typename S>
struct StreamWriter< ::RoboCompIMU::DataImu, S>
{
    static void write(S* ostr, const ::RoboCompIMU::DataImu& v)
    {
        ostr->write(v.acc);
        ostr->write(v.gyro);
        ostr->write(v.mag);
        ostr->write(v.rot);
        ostr->write(v.temperature);
    }
};

template<typename S>
struct StreamReader< ::RoboCompIMU::DataImu, S>
{
    static void read(S* istr, ::RoboCompIMU::DataImu& v)
    {
        istr->read(v.acc);
        istr->read(v.gyro);
        istr->read(v.mag);
        istr->read(v.rot);
        istr->read(v.temperature);
    }
};

}
/// \endcond

namespace RoboCompIMU
{

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::RoboCompIMU::IMU::begin_getAcceleration.
 * Create a wrapper instance by calling ::RoboCompIMU::newCallback_IMU_getAcceleration.
 */
template<class T>
class CallbackNC_IMU_getAcceleration : public Callback_IMU_getAcceleration_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const Acceleration&);

    CallbackNC_IMU_getAcceleration(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        IMUPrx proxy = IMUPrx::uncheckedCast(result->getProxy());
        Acceleration ret;
        try
        {
            ret = proxy->end_getAcceleration(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(ret);
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompIMU::IMU::begin_getAcceleration.
 */
template<class T> Callback_IMU_getAccelerationPtr
newCallback_IMU_getAcceleration(const IceUtil::Handle<T>& instance, void (T::*cb)(const Acceleration&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IMU_getAcceleration<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompIMU::IMU::begin_getAcceleration.
 */
template<class T> Callback_IMU_getAccelerationPtr
newCallback_IMU_getAcceleration(T* instance, void (T::*cb)(const Acceleration&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IMU_getAcceleration<T>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::RoboCompIMU::IMU::begin_getAcceleration.
 * Create a wrapper instance by calling ::RoboCompIMU::newCallback_IMU_getAcceleration.
 */
template<class T, typename CT>
class Callback_IMU_getAcceleration : public Callback_IMU_getAcceleration_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const Acceleration&, const CT&);

    Callback_IMU_getAcceleration(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        IMUPrx proxy = IMUPrx::uncheckedCast(result->getProxy());
        Acceleration ret;
        try
        {
            ret = proxy->end_getAcceleration(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(ret, CT::dynamicCast(result->getCookie()));
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompIMU::IMU::begin_getAcceleration.
 */
template<class T, typename CT> Callback_IMU_getAccelerationPtr
newCallback_IMU_getAcceleration(const IceUtil::Handle<T>& instance, void (T::*cb)(const Acceleration&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IMU_getAcceleration<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompIMU::IMU::begin_getAcceleration.
 */
template<class T, typename CT> Callback_IMU_getAccelerationPtr
newCallback_IMU_getAcceleration(T* instance, void (T::*cb)(const Acceleration&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IMU_getAcceleration<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::RoboCompIMU::IMU::begin_getAngularVel.
 * Create a wrapper instance by calling ::RoboCompIMU::newCallback_IMU_getAngularVel.
 */
template<class T>
class CallbackNC_IMU_getAngularVel : public Callback_IMU_getAngularVel_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const Gyroscope&);

    CallbackNC_IMU_getAngularVel(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        IMUPrx proxy = IMUPrx::uncheckedCast(result->getProxy());
        Gyroscope ret;
        try
        {
            ret = proxy->end_getAngularVel(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(ret);
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompIMU::IMU::begin_getAngularVel.
 */
template<class T> Callback_IMU_getAngularVelPtr
newCallback_IMU_getAngularVel(const IceUtil::Handle<T>& instance, void (T::*cb)(const Gyroscope&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IMU_getAngularVel<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompIMU::IMU::begin_getAngularVel.
 */
template<class T> Callback_IMU_getAngularVelPtr
newCallback_IMU_getAngularVel(T* instance, void (T::*cb)(const Gyroscope&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IMU_getAngularVel<T>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::RoboCompIMU::IMU::begin_getAngularVel.
 * Create a wrapper instance by calling ::RoboCompIMU::newCallback_IMU_getAngularVel.
 */
template<class T, typename CT>
class Callback_IMU_getAngularVel : public Callback_IMU_getAngularVel_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const Gyroscope&, const CT&);

    Callback_IMU_getAngularVel(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        IMUPrx proxy = IMUPrx::uncheckedCast(result->getProxy());
        Gyroscope ret;
        try
        {
            ret = proxy->end_getAngularVel(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(ret, CT::dynamicCast(result->getCookie()));
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompIMU::IMU::begin_getAngularVel.
 */
template<class T, typename CT> Callback_IMU_getAngularVelPtr
newCallback_IMU_getAngularVel(const IceUtil::Handle<T>& instance, void (T::*cb)(const Gyroscope&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IMU_getAngularVel<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompIMU::IMU::begin_getAngularVel.
 */
template<class T, typename CT> Callback_IMU_getAngularVelPtr
newCallback_IMU_getAngularVel(T* instance, void (T::*cb)(const Gyroscope&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IMU_getAngularVel<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::RoboCompIMU::IMU::begin_getDataImu.
 * Create a wrapper instance by calling ::RoboCompIMU::newCallback_IMU_getDataImu.
 */
template<class T>
class CallbackNC_IMU_getDataImu : public Callback_IMU_getDataImu_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const DataImu&);

    CallbackNC_IMU_getDataImu(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        IMUPrx proxy = IMUPrx::uncheckedCast(result->getProxy());
        DataImu ret;
        try
        {
            ret = proxy->end_getDataImu(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(ret);
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompIMU::IMU::begin_getDataImu.
 */
template<class T> Callback_IMU_getDataImuPtr
newCallback_IMU_getDataImu(const IceUtil::Handle<T>& instance, void (T::*cb)(const DataImu&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IMU_getDataImu<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompIMU::IMU::begin_getDataImu.
 */
template<class T> Callback_IMU_getDataImuPtr
newCallback_IMU_getDataImu(T* instance, void (T::*cb)(const DataImu&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IMU_getDataImu<T>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::RoboCompIMU::IMU::begin_getDataImu.
 * Create a wrapper instance by calling ::RoboCompIMU::newCallback_IMU_getDataImu.
 */
template<class T, typename CT>
class Callback_IMU_getDataImu : public Callback_IMU_getDataImu_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const DataImu&, const CT&);

    Callback_IMU_getDataImu(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        IMUPrx proxy = IMUPrx::uncheckedCast(result->getProxy());
        DataImu ret;
        try
        {
            ret = proxy->end_getDataImu(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(ret, CT::dynamicCast(result->getCookie()));
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompIMU::IMU::begin_getDataImu.
 */
template<class T, typename CT> Callback_IMU_getDataImuPtr
newCallback_IMU_getDataImu(const IceUtil::Handle<T>& instance, void (T::*cb)(const DataImu&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IMU_getDataImu<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompIMU::IMU::begin_getDataImu.
 */
template<class T, typename CT> Callback_IMU_getDataImuPtr
newCallback_IMU_getDataImu(T* instance, void (T::*cb)(const DataImu&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IMU_getDataImu<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::RoboCompIMU::IMU::begin_getMagneticFields.
 * Create a wrapper instance by calling ::RoboCompIMU::newCallback_IMU_getMagneticFields.
 */
template<class T>
class CallbackNC_IMU_getMagneticFields : public Callback_IMU_getMagneticFields_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const Magnetic&);

    CallbackNC_IMU_getMagneticFields(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        IMUPrx proxy = IMUPrx::uncheckedCast(result->getProxy());
        Magnetic ret;
        try
        {
            ret = proxy->end_getMagneticFields(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(ret);
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompIMU::IMU::begin_getMagneticFields.
 */
template<class T> Callback_IMU_getMagneticFieldsPtr
newCallback_IMU_getMagneticFields(const IceUtil::Handle<T>& instance, void (T::*cb)(const Magnetic&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IMU_getMagneticFields<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompIMU::IMU::begin_getMagneticFields.
 */
template<class T> Callback_IMU_getMagneticFieldsPtr
newCallback_IMU_getMagneticFields(T* instance, void (T::*cb)(const Magnetic&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IMU_getMagneticFields<T>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::RoboCompIMU::IMU::begin_getMagneticFields.
 * Create a wrapper instance by calling ::RoboCompIMU::newCallback_IMU_getMagneticFields.
 */
template<class T, typename CT>
class Callback_IMU_getMagneticFields : public Callback_IMU_getMagneticFields_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const Magnetic&, const CT&);

    Callback_IMU_getMagneticFields(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        IMUPrx proxy = IMUPrx::uncheckedCast(result->getProxy());
        Magnetic ret;
        try
        {
            ret = proxy->end_getMagneticFields(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(ret, CT::dynamicCast(result->getCookie()));
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompIMU::IMU::begin_getMagneticFields.
 */
template<class T, typename CT> Callback_IMU_getMagneticFieldsPtr
newCallback_IMU_getMagneticFields(const IceUtil::Handle<T>& instance, void (T::*cb)(const Magnetic&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IMU_getMagneticFields<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompIMU::IMU::begin_getMagneticFields.
 */
template<class T, typename CT> Callback_IMU_getMagneticFieldsPtr
newCallback_IMU_getMagneticFields(T* instance, void (T::*cb)(const Magnetic&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IMU_getMagneticFields<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::RoboCompIMU::IMU::begin_getOrientation.
 * Create a wrapper instance by calling ::RoboCompIMU::newCallback_IMU_getOrientation.
 */
template<class T>
class CallbackNC_IMU_getOrientation : public Callback_IMU_getOrientation_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const Orientation&);

    CallbackNC_IMU_getOrientation(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        IMUPrx proxy = IMUPrx::uncheckedCast(result->getProxy());
        Orientation ret;
        try
        {
            ret = proxy->end_getOrientation(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(ret);
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompIMU::IMU::begin_getOrientation.
 */
template<class T> Callback_IMU_getOrientationPtr
newCallback_IMU_getOrientation(const IceUtil::Handle<T>& instance, void (T::*cb)(const Orientation&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IMU_getOrientation<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompIMU::IMU::begin_getOrientation.
 */
template<class T> Callback_IMU_getOrientationPtr
newCallback_IMU_getOrientation(T* instance, void (T::*cb)(const Orientation&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IMU_getOrientation<T>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::RoboCompIMU::IMU::begin_getOrientation.
 * Create a wrapper instance by calling ::RoboCompIMU::newCallback_IMU_getOrientation.
 */
template<class T, typename CT>
class Callback_IMU_getOrientation : public Callback_IMU_getOrientation_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const Orientation&, const CT&);

    Callback_IMU_getOrientation(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        IMUPrx proxy = IMUPrx::uncheckedCast(result->getProxy());
        Orientation ret;
        try
        {
            ret = proxy->end_getOrientation(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(ret, CT::dynamicCast(result->getCookie()));
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompIMU::IMU::begin_getOrientation.
 */
template<class T, typename CT> Callback_IMU_getOrientationPtr
newCallback_IMU_getOrientation(const IceUtil::Handle<T>& instance, void (T::*cb)(const Orientation&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IMU_getOrientation<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompIMU::IMU::begin_getOrientation.
 */
template<class T, typename CT> Callback_IMU_getOrientationPtr
newCallback_IMU_getOrientation(T* instance, void (T::*cb)(const Orientation&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IMU_getOrientation<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::RoboCompIMU::IMU::begin_resetImu.
 * Create a wrapper instance by calling ::RoboCompIMU::newCallback_IMU_resetImu.
 */
template<class T>
class CallbackNC_IMU_resetImu : public Callback_IMU_resetImu_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_IMU_resetImu(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompIMU::IMU::begin_resetImu.
 */
template<class T> Callback_IMU_resetImuPtr
newCallback_IMU_resetImu(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IMU_resetImu<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompIMU::IMU::begin_resetImu.
 */
template<class T> Callback_IMU_resetImuPtr
newCallback_IMU_resetImu(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IMU_resetImu<T>(instance, 0, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompIMU::IMU::begin_resetImu.
 */
template<class T> Callback_IMU_resetImuPtr
newCallback_IMU_resetImu(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IMU_resetImu<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompIMU::IMU::begin_resetImu.
 */
template<class T> Callback_IMU_resetImuPtr
newCallback_IMU_resetImu(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_IMU_resetImu<T>(instance, 0, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::RoboCompIMU::IMU::begin_resetImu.
 * Create a wrapper instance by calling ::RoboCompIMU::newCallback_IMU_resetImu.
 */
template<class T, typename CT>
class Callback_IMU_resetImu : public Callback_IMU_resetImu_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_IMU_resetImu(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompIMU::IMU::begin_resetImu.
 */
template<class T, typename CT> Callback_IMU_resetImuPtr
newCallback_IMU_resetImu(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IMU_resetImu<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompIMU::IMU::begin_resetImu.
 */
template<class T, typename CT> Callback_IMU_resetImuPtr
newCallback_IMU_resetImu(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IMU_resetImu<T, CT>(instance, 0, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompIMU::IMU::begin_resetImu.
 */
template<class T, typename CT> Callback_IMU_resetImuPtr
newCallback_IMU_resetImu(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IMU_resetImu<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompIMU::IMU::begin_resetImu.
 */
template<class T, typename CT> Callback_IMU_resetImuPtr
newCallback_IMU_resetImu(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_IMU_resetImu<T, CT>(instance, 0, excb, sentcb);
}

}

#endif

#include <IceUtil/PopDisableWarnings.h>
#endif
